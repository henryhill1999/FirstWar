city.names <- c("A", "B", "C", "D", "E", "F", "G", "H")
observed.turnout = c(18, 30, 14, 52, 24, 29, 48, 49)

observed.diffmeans <- mean(observed.turnout[c(2,4,6,8)]) - 
  mean(observed.turnout[c(1,3,5,7)])

print(observed.diffmeans)

foo <- cbind.data.frame(city.names, observed.turnout)

# Assignment function
assignment <- function() {
  # Four coin flips, establishing random assignment
  assig        <- foo[sample(1:2),]
  assig[3:4,]  <- foo[sample(3:4),]
  assig[5:6,]  <- foo[sample(5:6),]
  assig[7:8,]  <- foo[sample(7:8),]
  
  treatment.group   <- assig[c(1,3,5,7),]
  control.group     <- assig[c(2,4,6,8),]
  
  return(mean(treatment.group[,2]) - mean(control.group[,2]))
}

# Iterating the Assignment function
iter.RI <- function(iterations = 100000) {
  for (i in 1:iterations) 
  {
    storage.vector[i] <- assignment()
  }
  return(storage.vector)
}

storage.vector <- NULL
results <- iter.RI(1000)

# Exploring the results

quantile(results, prob = c(0.025, 0.975))

length(unique(results))

hist(results)
plot(density(results))
abline(v = 14, lwd = 2, col = "red")

getwd()

# arrange data so that it goes CONTROL, TREATED, CONTROL, TREATED, ETC...
names <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
observed.turnout = c(17, 30, 13, 55, 26, 29, 48, 43, 40, 22)

# because the data is arranged CONTROL, TREATED, CONTROL, TREATED, ETC...
observed.diffmeans <-               # calculate the difference in mean outcomes
  mean(observed.turnout[c(2,4,6,8,10)]) - 
  mean(observed.turnout[c(1,3,5,7,9)])

# what's the observed difference in means outcomes
print(observed.diffmeans)

# here's the data set
foo <- data.frame(city.names, observed.turnout)

# Fisher Exact Test with blocking--to get the p-value
storage.vector <- NA

Y0s <-  c(foo[1,2], foo[2,2]-nulleffect, 
          foo[3,2], foo[4,2]-nulleffect,
          foo[5,2], foo[6,2]-nulleffect, 
          foo[7,2], foo[8,2]-nulleffect, 
          foo[9,2], foo[10,2]-nulleffect)

Y1s <-  
  c(foo[1,2]+nulleffect, foo[2,2], 
    foo[3,2]+nulleffect, foo[4,2],
    foo[5,2]+nulleffect, foo[6,2], 
    foo[7,2]+nulleffect, foo[8,2], 
    foo[9,2]+nulleffect, foo[10,2])

which_treated <- c(sample(c(1,2), 1),
                   sample(c(3,4), 1),
                   sample(c(5,6), 1),
                   sample(c(7,8), 1),
                   sample(c(9,10), 1))

which_controls <- c(1:10)[-which_treated]

storage.vector[i] <- (mean(Y1s[which_treated]) - mean(Y0s[which_controls]))
}

empirical.pvalue <- sum(storage.vector >= observed.diffmeans)/sims
return(empirical.pvalue)
}

storage <- data.frame(nrow = 100, ncol = 2)
for (i in 1:100){
  n = (i-40)/2
  storage[i,] <- c(n, fisherfunction(nulleffect = n))  # use this to obtain the p-value
  # you can set the sharp null hypothesis...
}
plot(storage[,1],storage[,2])




fisherfunction <- function(obs, nulleffect = 0, sims = 1000) {
  control <- obs[1:8]
  treat <- obs[9:16]
  diffmeans <- mean(treat) - mean(control)
  
  storage <- c()
  for(i in 1:sims) {
    sampleis <- sample(16,8)
    randomControl <- obs[sampleis]
    randomTreat <- obs[-sampleis]
    
    storage[i] <- mean(randomTreat) - mean(randomControl)
    
  }
  hist(storage)
  return (length(which(storage >= diffmeans))/length(storage))
}

fisher2  <- function(obs, nulleffect = 0, sims = 1000) {
  odds <- c(1:8) * 2 - 1
  
  control <- obs[odds]
  treat <- obs[-odds]
  
  diffmeans <- mean(treat) - mean(control)
  
  storage <- c()
  for(i in 1:sims) {
    pairwise <- sample(c(0,1), 8, replace = TRUE)
    
    randomControl <- obs[odds+pairwise]
    randomTreat <- obs[-(odds+pairwise)]
    
    storage[i] <- mean(randomTreat) - mean(randomControl)
    
  }
  hist(storage)
  
  return (length(which(storage >= diffmeans))/length(storage))
}

fisherfunction(rep(observed.turnout,2))
fisher2(rep(observed.turnout,2))

